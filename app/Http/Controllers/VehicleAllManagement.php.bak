<?php

namespace App\Http\Controllers;

use App\DriverVehicle;
use App\Status;
use App\Vehicle;
use App\VehicleType;
use Illuminate\Http\Request;

use App\Http\Requests;
use League\Flysystem\Exception;

class VehicleAllManagement extends Controller
{
    public function getViewVehicleAll()
    {
        return view('subviews.Vehicle.VehicleAllManagement');
    }

    public function getDataVehicleAll()
    {
        $allVehicles = \DB::table('vehicles')
            ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
            ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
            ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
            ->leftJoin('driverVehicles', 'vehicles.id', '=', 'driverVehicles.vehicle_id')
            ->leftJoin('drivers', 'driverVehicles.driver_id', '=', 'drivers.id')
            ->where('vehicles.active', 1)
            ->select('vehicles.*',
                'vehicleTypes.name',
                'vehicleTypes.id as vehicleType_id',
                'garages.name as garagesName',
                'statuses.status',
                'drivers.id as idDriver',
                'drivers.fullName as nameDriver'
            )
            ->get();

        $garages = \DB::table('garages')
            ->select('id', 'name')
            ->where('active', 1)
            ->get();
        $statuses = Status::where('tableName', 'vehicles')->get();
        $vehicleType = \DB::table('vehicleTypes')->get();
        $drivers = \DB::table('drivers')
            ->where('active', 1)
            ->select('id', 'fullName', 'identityCardNumber', 'driverLicenseType')
            ->get();

        $response = [
            'msg'             => 'Get data vehicles success',
            'dataAllVehicle'  => $allVehicles,
            'dataStatus'      => $statuses,
            'dataVehicleType' => $vehicleType,
            'dataDrivers'     => $drivers,
            'dataGarages'     => $garages,
        ];
        return response()->json($response, 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postDataVehicleAll(Request $request)
    {
        dd($request->all());
        $areaCode = null;
        $vehicleNumber = null;
        $size = null;
        $weight = null;
        $note = null;
        $vehicleType_id = null;
        $owner = null;
        $trademark = null;
        $yearOfProduction = null;
        $idDriver = null;
        $garage_id = null;
        $action = $request->input('_action');
        if ($action != 'delete' && $action != 'updateStatus' && $action != 'history' && $action != 'searchStt') {
            $validator = ValidateController::ValidateVehicle($request->input('_vehicle'));
            if ($validator->fails()) {
                return $validator->errors();
//                return response()->json(['msg' => 'Input data fail'], 404);
            }
            // $id = $request->input('_vehicle')['id'];
            $areaCode = $request->input('_vehicle')['areaCode'];
            $vehicleNumber = $request->input('_vehicle')['vehicleNumber'];
            $size = $request->input('_vehicle')['size'];
            $weight = $request->input('_vehicle')['weight'];
            $note = $request->input('_vehicle')['note'];
            $vehicleType_id = $request->input('_vehicle')['vehicleType_id'];
            $owner = $request->input('_vehicle')['owner'];
            $trademark = $request->input('_vehicle')['trademark'];
            $yearOfProduction = $request->input('_vehicle')['yearOfProduction'];
            $idDriver = $request->input('_vehicle')['idDriver'];
            $garage_id = $request->input('_vehicle')['garage_id'];
        }
        switch ($action) {
            case 'add':
                $addVehicle = new Vehicle();
                $addVehicle->areaCode = $areaCode;
                $addVehicle->vehicleNumber = $vehicleNumber;
                $addVehicle->size = $size;
                $addVehicle->weight = $weight;
                $addVehicle->note = $note;
                $addVehicle->vehicleType_id = $vehicleType_id;
                $addVehicle->owner = $owner;
                $addVehicle->trademark = $trademark;
                $addVehicle->yearOfProduction = $yearOfProduction;
                $addVehicle->garage_id = $garage_id;
                if ($addVehicle->save()) {
                    $newVehicle = \DB::table('vehicles')
                        ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
                        ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
                        ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
                        ->leftJoin('driverVehicles', 'vehicles.id', '=', 'driverVehicles.vehicle_id')
                        ->leftJoin('drivers', 'driverVehicles.driver_id', '=', 'drivers.id')
                        ->where('vehicles.active', 1)
                        ->where('vehicles.id', $addVehicle->id)
                        ->select('vehicles.*',
                            'vehicleTypes.name',
                            'vehicleTypes.id as vehicleType_id',
                            'garages.name as garagesName',
                            'statuses.status',
                            'drivers.id as idDriver',
                            'drivers.fullName as nameDriver'
                        )
                        ->first();
                    $response = [
                        'msg'        => 'add vehicle',
                        'newVehicle' => $newVehicle
                    ];
                    return response()->json($response, 201);
                }
                return response()->json(['msg' => 'Update failed'], 404);
                break;
            case 'update':
                $vehicleUpdate = Vehicle::findOrFail($request->input('_vehicle')['id']);
                $vehicleUpdate->areaCode = $areaCode;
                $vehicleUpdate->vehicleNumber = $vehicleNumber;
                $vehicleUpdate->size = $size;
                $vehicleUpdate->weight = $weight;
                $vehicleUpdate->note = $note;
                $vehicleUpdate->vehicleType_id = $vehicleType_id;
                $vehicleUpdate->owner = $owner;
                $vehicleUpdate->trademark = $trademark;
                $vehicleUpdate->yearOfProduction = $yearOfProduction;
                $vehicleUpdate->garage_id = $garage_id;
                if ($vehicleUpdate->update()) {
                    \DB::table('driverVehicles')
                        ->where('vehicle_id', $request->input('_vehicle')['id'])
                        ->update(['driver_id' => $idDriver]);
                    $updateVehicle = \DB::table('vehicles')
                        ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
                        ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
                        ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
                        ->leftJoin('driverVehicles', 'vehicles.id', '=', 'driverVehicles.vehicle_id')
                        ->leftJoin('drivers', 'driverVehicles.driver_id', '=', 'drivers.id')
                        ->where('vehicles.active', 1)
                        ->where('vehicles.id', $request->input('_vehicle')['id'])
                        ->select('vehicles.*',
                            'vehicleTypes.name',
                            'vehicleTypes.id as vehicleType_id',
                            'garages.name as garagesName',
                            'statuses.status',
                            'drivers.id as idDriver',
                            'drivers.fullName as nameDriver'
                        )
                        ->first();
                    $response = [
                        'msg'           => 'Updated vehicle',
                        'updateVehicle' => $updateVehicle
                    ];
                    return response()->json($response, 201);

                }

                return response()->json(['msg' => 'Update failed'], 404);
                break;
            case 'delete':
                $deleteVehicle = Vehicle::findOrFail($request->input('_id'));
                $deleteVehicle->active = 0;
                if ($deleteVehicle->update()) {
                    $response = [
                        'msg' => 'Deleted vehicle'
                    ];
                    return response()->json($response, 201);
                }
                return response()->json(['msg' => 'Deletion failed'], 404);
                break;
            case 'updateStatus':
                if ($request->input('_flag') == 0) {
                    $statusVehicle = Vehicle::findOrFail($request->input('_idVehicle'));
                    $statusVehicle->status_id = $request->input('_status');
                    if ($statusVehicle->update()) {
                        $updateStatus = \DB::table('vehicles')
                            ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
                            ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
                            ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
                            ->where('vehicles.active', 1)
                            ->where('vehicles.id', $request->input('_idVehicle'))
                            ->select('vehicles.*',
                                'vehicleTypes.name',
                                'vehicleTypes.id as vehicleType_id',
                                'garages.name as garagesName',
                                'statuses.status'
                            )
                            ->first();
                        $response = [
                            'msg'          => 'Updated status',
                            'updateStatus' => $updateStatus
                        ];
                        return response()->json($response, 201);
                    }
                }
                if ($request->input('_flag') == 1) {
                    if (Vehicle::whereIn('id', $request->get('_idVehicle'))->update(
                        ['vehicles.status_id' => $request->get('_status')]
                    )
                    ) {
                        $updateStatus = \DB::table('vehicles')
                            ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
                            ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
                            ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
                            ->where('vehicles.active', 1)
                            ->select('vehicles.*',
                                'vehicleTypes.name',
                                'vehicleTypes.id as vehicleType_id',
                                'garages.name as garagesName',
                                'statuses.status'
                            )
                            ->get();

                        $response = [
                            'msg'          => 'Updated status',
                            'updateStatus' => $updateStatus
                        ];
                        return response()->json($response, 201);
                    }
                }
                return response()->json(['msg' => 'change status failed'], 404);
                break;
            case 'history':
                $historyPt = \DB::table('driverVehicles')
                    ->leftJoin('vehicles', 'driverVehicles.vehicle_id', '=', 'vehicles.id')
                    ->leftJoin('drivers', 'driverVehicles.driver_id', '=', 'drivers.id')
                    ->where('vehicles.id', $request->get('_idVehicle'))
                    ->select('vehicles.*',
                        'drivers.fullName',
                        'driverVehicles.created_at as date_created'
                    )
                    ->get();
//                vehicles.id,vehicles.areaCode, drivers.fullName,drivervehicles.created_at
                $response = [
                    'msg'         => 'history PT vehicle',
                    'listHistory' => $historyPt
                ];
                return response()->json($response, 201);

                return response()->json(['msg' => 'load failed'], 404);
                break;
            case 'searchStt':
                $searchStt = \DB::table('vehicles')
                    ->leftJoin('garages', 'vehicles.garage_id', '=', 'garages.id')
                    ->leftJoin('statuses', 'vehicles.status_id', '=', 'statuses.id')
                    ->leftJoin('vehicleTypes', 'vehicles.vehicleType_id', '=', 'vehicleTypes.id')
                    ->where('vehicles.active', 1)
                    ->where('vehicles.status_id', $request->input('_status'))
                    ->select('vehicles.*',
                        'vehicleTypes.name',
                        'vehicleTypes.id as vehicleType_id',
                        'garages.name as garagesName',
                        'statuses.status'
                    )
                    ->get();
                $response = [
                    'msg'          => 'search status vehicle',
                    'searchStatus' => $searchStt
                ];
                return response()->json($response, 201);
            default:
                return response()->json(['msg' => 'Connection to server failed'], 404);
                break;
        }

    }

    public function postModifyVehicleType(Request $request)
    {

        $vehicleType = null;
        $description = null;
        $action = $request->input('_action');

        if ($action != 'delete') {
            $validator = ValidateController::ValidateVehicleType($request->input('_vehicleType'));
            if ($validator->fails()) {
                return response()->json(['msg' => 'Input data fail'], 404);
            }
            $vehicleType = $request->get('_vehicleType')['vehicleType'];
            $description = $request->get('_vehicleType')['description'];
        }
        switch ($action) {
            case'addNewVehicleType':
                $vehicleTypeNew = new VehicleType();
                $vehicleTypeNew->name = $vehicleType;
                $vehicleTypeNew->description = $description;
                if (!$vehicleTypeNew->save()) {
                    return response()->json(['msg' => 'Create failed'], 404);
                }
                $vehicleTypes = \DB::table('vehicleTypes')
                    ->get();
                $response = [
                    'msg'              => 'Created vehicleType',
                    'dataVehicleTypes' => $vehicleTypes,
                ];
                return response()->json($response, 201);
//                $response = $this->getDataVehicleAll();
//                return response()->json($response, 201);
                break;
            case 'updateVehicleType':
                $vehicleTypeUpdate = VehicleType::findOrFail($request->input('_vehicleType')['id']);
                $vehicleTypeUpdate->name = $vehicleType;
                $vehicleTypeUpdate->description = $description;
                if ($vehicleTypeUpdate->update()) {
//                    $response = $this->getDataVehicleAll();
//                    return response()->json($response, 201);
                    $vehicleTypes = \DB::table('vehicleTypes')
                        ->get();
                    $response = [
                        'msg'                => 'Updated Vehicle',
                        'updateVehicleTypes' => $vehicleTypes
                    ];
                    return response()->json($response, 201);
                }
                return response()->json(['msg' => 'Update failed'], 404);
                break;
            default:
                return response()->json(['msg' => 'Connection to server failed'], 404);
                break;
        }
    }


}
